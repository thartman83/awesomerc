#+TITLE: Awesome RC
#+AUTHOR: Tom Hartman
#+STARTUP: overview
#+PROPERTY: header-args:lua :tangle ./rc-test.lua

* Introduction
This is my literate awesome-rc setup. Each section defines an area and aspect of the awesome configuration providing documentation for the code.

This setup makes liberal use of git subtrees for external libraries. These include:

- awesome-wm-widgets (https://github.com/streetturtle/awesome-wm-widgets)

    Awesome wm widgets adds a large number of common and helpful widgets to awesome including normal things like cpu, memory, and storage monitoring, as well as more complex widgets like docker and weather.

- bling (https://github.com/BlingCorp/bling)
- cyclefocus (https://github.com/blueyed/awesome-cyclefocus)
- lain (https://github.com/lcpz/lain)
- layout-machi (https://github.com/xinhaoyuan/layout-machi)
- machina (https://github.com/basaran/awesomewm-machina)
- nice (https://github.com/mut-ex/awesome-wm-nice)

  These are added to the repository via the shell command
  #+begin_src sh
git subtree add --prefix {new_src_dr} {git_url} {tag_or_branch} --squash
  #+end_src

  They are pulled into the repository at the current state of tag_or_branch.

* Libraries

** Core Awesome Libraries
Include the core awesome libraries

#+begin_src lua
local gears     = require("gears"                    )
local gtable    = require("gears.table"              )
local awful     = require("awful"                    )
                  require("awful.autofocus"          )
                  require("awful.hotkeys_popup.keys" )
local wibox     = require("wibox"                    )
local beautiful = require("beautiful"                )
local naughty   = require("naughty"                  )
local ruled     = require("ruled"                    )
local menubar   = require("menubar"                  )
local io        = require("io"                       )
local dpi       = require("beautiful.xresources"     ).apply_dpi
#+end_src

** Awesome Widget Libraries
Include libraries from the awesome widgets library

#+begin_src lua
local weather    = require("awesome-wm-widgets.weather-widget.weather")
local cpu_widget = require("awesome-wm-widgets.cpu-widget.cpu-widget" )
local volumebar_widget = require("awesome-wm-widgets.volumebar-widget.volumebar")
local spotify_widget = require("awesome-wm-widgets.spotify-widget.spotify")
local docker_widget = require("awesome-wm-widgets.docker-widget.docker")
local bt_widget = require("awesome-wm-widgets.bluetooth-widget.bluetooth")
#+end_src

* Error Handling
This is the stock error handling for awesome-rc

#+begin_src lua
naughty.connect_signal("request::display_error", function(message, startup)
    naughty.notification {
        urgency = "critical",
        title   = "Oops, an error happened"..(startup and " during startup! Falling back!" or "!"),
        message = message
    }
end)
#+end_src

* Globals
Define some variables that will be used repeatedly through the configuration process
#+begin_src lua
local conf_dir = gears.filesystem.get_configuration_dir()
#+end_src

* Terminal
The terminal needs to be setup early for later processing with in the configuration

#+begin_src lua
--terminal = config.user.terminal --"kitty" --"urxvt"
terminal   = "urxvt"
editor     = os.getenv("EDITOR") or "emacsclient -nc"
editor_cmd = terminal .. " -e " .. editor
#+end_src

* Key Definition
Define various special keys such as the 'modkey' which is the primary way awesome commands and functionality is invoked. 'Mod4' is sometimes called the 'Super' key as well as the 'Windows' key. Usually its the key between the left hand control and alt.

#+begin_src lua
modkey = "Mod4"
altkey  = "Mod1"
ctrlkey = "Control"
#+end_src

* Layout Definitions
Define the various layouts available to each tag.

#+begin_src lua
local defaultlayouts = {
   machi.default_layout,
   awful.layout.suit.tile,
   awful.layout.suit.floating,
   lain.layout.centerwork,
   lain.layout.termfair.center,
   awful.layout.suit.spiral,
   awful.layout.suit.magnifier,
   awful.layout.suit.max,
   awful.layout.suit.max.fullscreen,
   machi.layout.create{ new_placement_cb = machi.layout.placement.empty_then_fair },
   awful.layout.suit.tile.bottom,
}

tag.connect_signal("request::default_layouts", function()
    awful.layout.append_default_layouts(defaultLayouts)
end)

lain.layout.termfair.nmaster           = 3
lain.layout.termfair.ncol              = 1
lain.layout.termfair.center.nmaster    = 3
lain.layout.termfair.center.ncol       = 1
lain.layout.cascade.tile.offset_x      = dpi(2)
lain.layout.cascade.tile.offset_y      = dpi(32)
lain.layout.cascade.tile.extra_padding = dpi(5)
lain.layout.cascade.tile.nmaster       = 5
lain.layout.cascade.tile.ncol          = 2
#+end_src

* Theme and styling
Set the theme

#+begin_src lua
local themeName = "multicolor"
beautiful.init(conf_dir .. "/themes/" .. themeName .. "/theme.lua")
#+end_src

* Mouse Bindings
#+begin_src lua
awful.mouse.append_global_mousebindings({
    awful.button({}, 3, function() main_menu:toggle(nil, { source = "mouse" }) end),
    awful.button({}, 4, awful.tag.viewprev),
    awful.button({}, 5, awful.tag.viewnext),
    awful.button({ modkey, altkey }, 4, function ()
        os.execute(string.format("amixer -q set %s 5%%+", beautiful.volume.channel))
        beautiful.volume.update()
    end),
    awful.button({ modkey, altkey }, 5, function ()
        os.execute(string.format("amixer -q set %s 5%%-", beautiful.volume.channel))
        beautiful.volume.update()
    end),
})
#+end_src

* Key Binding
#+begin_src lua
awful.keyboard.append_global_keybindings({
    awful.key({ modkey, ctrlkey }, "s", hotkeys_popup.show_help,
              {description="show help", group="awesome"}),
    awful.key({ modkey }, "w", function () main_menu:toggle(nil, { source = "mouse" }) end,
              {description = "show main menu", group = "awesome"}),
    awful.key({ modkey }, "q", function () fishlive.widget.exit_screen() end,
              {description = "exit screen", group = "awesome"}),
    awful.key({ modkey }, "c", function () beautiful.menu_colorschemes_create():toggle() end,
              {description = "show colorschemes menu", group = "awesome"}),
    awful.key({ modkey }, "x", function () beautiful.menu_portrait_create():toggle() end,
              {description = "show portrait menu for love tag", group = "awesome"}),
    awful.key({ modkey }, "a", function () awful.spawn("clipmenu") end,
              {description = "clipboard history by rofi/clipmenud", group = "awesome"}),
    awful.key({ modkey }, "l", function() awful.menu.client_list { theme = { width = 250 } } end,
              {description="show client list", group="awesome"}),
    awful.key({ modkey, ctrlkey }, "r", awesome.restart,
              {description = "reload awesome", group = "awesome"}),
    awful.key({ modkey, "Shift" }, "q", awesome.quit,
              {description = "quit awesome", group = "awesome"}),
    awful.key({ modkey, ctrlkey }, "x", function ()
        awful.prompt.run {
            prompt       = "Run Lua code: ",
            textbox      = awful.screen.focused().mypromptbox.widget,
            exe_callback = awful.util.eval,
            history_path = awful.util.get_cache_dir() .. "/history_eval"
        }
        end,
        {description = "lua execute prompt", group = "awesome"}),
    awful.key({ modkey }, "Return", function () awful.spawn(terminal) end,
              {description = "open a terminal (alacritty)", group = "launcher"}),
    awful.key({ modkey, altkey }, "Return", function () awful.spawn(terminal2) end,
              {description = "open a terminal2 (wezterm)", group = "launcher"}),
    awful.key({ modkey }, "r", function () awful.screen.focused().mypromptbox:run() end,
              {description = "run prompt", group = "launcher"}),
    awful.key({ modkey }, "p", function() menubar.show() end,
              {description = "show the d-menu", group = "launcher"}),
})

-- Tags related keybindings
awful.keyboard.append_global_keybindings({
    awful.key({ modkey }, "Left", awful.tag.viewprev,
              {description = "view previous", group = "tag"}),
    awful.key({ modkey }, "Right",awful.tag.viewnext,
              {description = "view next", group = "tag"}),
    awful.key({ modkey }, "Escape", awful.tag.history.restore,
              {description = "go back", group = "tag"}),
})

-- Focus related keybindings
awful.keyboard.append_global_keybindings({
    awful.key({ modkey }, "j", function () awful.client.focus.byidx(1) end,
        {description = "focus next by index", group = "client"}
    ),
    awful.key({ modkey }, "k", function () awful.client.focus.byidx(-1) end,
        {description = "focus previous by index", group = "client"}
    ),
    awful.key({ modkey }, "Tab", function ()
            awful.client.focus.history.previous()
            if client.focus then
                client.focus:raise()
            end
        end,
        {description = "go back", group = "client"}),
    awful.key({ modkey, ctrlkey }, "j", function () awful.screen.focus_relative( 1) end,
              {description = "focus the next screen", group = "screen"}),
    awful.key({ modkey, ctrlkey }, "k", function () awful.screen.focus_relative(-1) end,
              {description = "focus the previous screen", group = "screen"}),
    awful.key({ modkey, ctrlkey }, "n", function ()
              local c = awful.client.restore()
              -- Focus restored client
              if c then
                c:activate { raise = true, context = "key.unminimize" }
              end
          end,
          {description = "restore minimized", group = "client"}),
})

-- Tabbed related keybindings
awful.keyboard.append_global_keybindings({
    awful.key {
        modifiers   = { modkey, ctrlkey },
        keygroup    = "numpad",
        description = "tabbed features",
        group       = "client",
        on_press    = function(index)
            if index == 1 then bling.module.tabbed.pick_with_dmenu()
            elseif index == 2 then bling.module.tabbed.pick_by_direction("down")
            elseif index == 4 then bling.module.tabbed.pick_by_direction("left")
            elseif index == 5 then bling.module.tabbed.iter()
            elseif index == 6 then bling.module.tabbed.pick_by_direction("right")
            elseif index == 7 then bling.module.tabbed.pick()
            elseif index == 8 then bling.module.tabbed.pick_by_direction("up")
            elseif index == 9 then bling.module.tabbed.pop()
            end
        end
    },
})

-- Layout related keybindings
awful.keyboard.append_global_keybindings({
    awful.key({ modkey, "Shift" }, "j", function () awful.client.swap.byidx(1) end,
              {description = "swap with next client by index", group = "client"}),
    awful.key({ modkey, "Shift" }, "k", function () awful.client.swap.byidx(-1) end,
              {description = "swap with previous client by index", group = "client"}),
    awful.key({ modkey }, "u", awful.client.urgent.jumpto,
              {description = "jump to urgent client", group = "client"}),
    awful.key({ modkey }, "l", function () awful.tag.incmwfact( 0.05) end,
              {description = "increase master width factor", group = "layout"}),
    awful.key({ modkey }, "h", function () awful.tag.incmwfact(-0.05) end,
              {description = "decrease master width factor", group = "layout"}),
    awful.key({ modkey, "Shift" }, "h", function () awful.tag.incnmaster( 1, nil, true) end,
              {description = "increase the number of master clients", group = "layout"}),
    awful.key({ modkey, "Shift" }, "l", function () awful.tag.incnmaster(-1, nil, true) end,
              {description = "decrease the number of master clients", group = "layout"}),
    awful.key({ modkey, ctrlkey }, "h", function () awful.tag.incncol( 1, nil, true) end,
              {description = "increase the number of columns", group = "layout"}),
    awful.key({ modkey, ctrlkey }, "l", function () awful.tag.incncol(-1, nil, true) end,
              {description = "decrease the number of columns", group = "layout"}),
    awful.key({ modkey }, "space", function () awful.layout.inc( 1) end,
              {description = "select next", group = "layout"}),
    awful.key({ modkey, "Shift" }, "space", function () awful.layout.inc(-1) end,
              {description = "select previous", group = "layout"}),
})


awful.keyboard.append_global_keybindings({
    awful.key({ modkey, ctrlkey, "Shift" }, "Right", function()
      local screen = awful.screen.focused()
      local t = screen.selected_tag
      if t then
          local idx = t.index + 1
          if idx > #screen.tags then idx = 1 end
          if client.focus then
            client.focus:move_to_tag(screen.tags[idx])
            screen.tags[idx]:view_only()
          end
      end
    end,
    {description = "move focused client to next tag and view tag", group = "tag"}),

    awful.key({ modkey, ctrlkey, "Shift" }, "Left", function()
      local screen = awful.screen.focused()
      local t = screen.selected_tag
      if t then
          local idx = t.index - 1
          if idx == 0 then idx = #screen.tags end
          if client.focus then
            client.focus:move_to_tag(screen.tags[idx])
            screen.tags[idx]:view_only()
          end
      end
    end,
    {description = "move focused client to previous tag and view tag", group = "tag"}),

    awful.key {
        modifiers   = { modkey },
        keygroup    = "numrow",
        description = "only view tag",
        group       = "tag",
        on_press    = function (index)
            local screen = awful.screen.focused()
            local tag = screen.tags[index]
            if tag then
                tag:view_only()
            end
        end,
    },
    awful.key {
        modifiers   = { modkey, ctrlkey },
        keygroup    = "numrow",
        description = "toggle tag",
        group       = "tag",
        on_press    = function (index)
            local screen = awful.screen.focused()
            local tag = screen.tags[index]
            if tag then
                awful.tag.viewtoggle(tag)
            end
        end,
    },
    awful.key {
        modifiers = { modkey, "Shift" },
        keygroup    = "numrow",
        description = "move focused client to tag",
        group       = "tag",
        on_press    = function (index)
            if client.focus then
                local tag = client.focus.screen.tags[index]
                if tag then
                    client.focus:move_to_tag(tag)
                end
            end
        end,
    },
    awful.key {
        modifiers   = { modkey, ctrlkey, "Shift" },
        keygroup    = "numrow",
        description = "toggle focused client on tag",
        group       = "tag",
        on_press    = function (index)
            if client.focus then
                local tag = client.focus.screen.tags[index]
                if tag then
                    client.focus:toggle_tag(tag)
                end
            end
        end,
    },
    awful.key {
        modifiers   = { modkey },
        keygroup    = "numpad",
        description = "select layout directly",
        group       = "layout",
        on_press    = function (index)
            local t = awful.screen.focused().selected_tag
            if t then
                t.layout = t.layouts[index] or t.layout
            end
        end,
    }
})
#+end_src
* Client Signals
#+begin_src lua
client.connect_signal("request::default_mousebindings", function()
    awful.mouse.append_client_mousebindings({
        awful.button({}, 1, function (c)
            c:activate { context = "mouse_click" }
        end),
        awful.button({ modkey }, 1, function (c)
            c:activate { context = "mouse_click", action = "mouse_move"  }
        end),
        awful.button({ modkey }, 3, function (c)
            c:activate { context = "mouse_click", action = "mouse_resize"}
        end),
    })
end)

-- {{ Personal keybindings
client.connect_signal("request::default_keybindings", function()
    awful.keyboard.append_client_keybindings({
        -- swap and rotate clients in treetile layout
        awful.key({ modkey, "Shift" }, "r", function (c) treetile.rotate(c) end,
            {description = "treetile.container.rotate", group = "layout"}),
        awful.key({ modkey, "Shift" }, "s", function (c) treetile.swap(c) end,
            {description = "treetile.container.swap", group = "layout"}),

        -- transparency for focused client
        awful.key({ modkey }, "Next", function (c) awful.util.spawn("transset-df -a --inc 0.20 --max 0.99") end,
            {description="Client Transparency Up", group="client"}),
        awful.key({ modkey }, "Prior", function (c) awful.util.spawn("transset-df -a --min 0.1 --dec 0.1") end,
            {description="Client Transparency Down", group="client"}),

        -- show/hide titlebar
        awful.key({ modkey }, "t", awful.titlebar.toggle,
            {description = "Show/Hide Titlebars", group="client"}),

        -- altkey+Tab: cycle through all clients.
        awful.key({ altkey }, "Tab", function(c)
                cyclefocus.cycle({modifier="Alt_L"})
            end,
            {description = "Cycle through all clients", group="client"}
        ),
        -- altkey+Shift+Tab: backwards
        awful.key({ altkey, "Shift" }, "Tab", function(c)
                cyclefocus.cycle({modifier="Alt_L"})
            end,
            {description = "cycle through all clients backwards", group="client"}
        ),
    })
end)
--}}

client.connect_signal("request::default_keybindings", function()
    awful.keyboard.append_client_keybindings({
       -- Store debug information
        awful.key({ modkey, "Shift" }, "d", function (c)
                --naughty.notify {
                --    text = fishlive.helpers.screen_res_y()
                --}
                local val = awesome.systray()
                local file = io.open(os.getenv("HOME") .. "/.config/awesome/debug.txt", "a")
                file:write("systray.tostring=" .. val .. "\n")
                file:close()
            end,
            {description = "store debug information to awesome/debug.txt", group = "client"}),
        awful.key({ modkey }, "f", function (c)
                c.fullscreen = not c.fullscreen
                c:raise()
            end,
            {description = "toggle fullscreen", group = "client"}),
        awful.key({ modkey, "Shift" }, "c", function (c) c:kill() end,
                {description = "close", group = "client"}),
        awful.key({ modkey, ctrlkey }, "space", awful.client.floating.toggle,
                {description = "toggle floating", group = "client"}),
        awful.key({ modkey, ctrlkey }, "Return", function (c) c:swap(awful.client.getmaster()) end,
                {description = "move to master", group = "client"}),
        awful.key({ modkey }, "o", function (c) c:move_to_screen() end,
                {description = "move to screen", group = "client"}),
        awful.key({ modkey }, "t", function (c) c.ontop = not c.ontop end,
                {description = "toggle keep on top", group = "client"}),
        awful.key({ modkey }, "n", function (c)
                -- The client currently has the input focus, so it cannot be
                -- minimized, since minimized clients can't have the focus.
                c.minimized = true
            end ,
            {description = "minimize", group = "client"}),
        awful.key({ modkey }, "m", function (c)
                c.maximized = not c.maximized
                c:raise()
            end ,
            {description = "(un)maximize", group = "client"}),
        awful.key({ modkey, ctrlkey }, "m", function (c)
                c.maximized_vertical = not c.maximized_vertical
                c:raise()
            end ,
            {description = "(un)maximize vertically", group = "client"}),
        awful.key({ modkey, "Shift"   }, "m", function (c)
                c.maximized_horizontal = not c.maximized_horizontal
                c:raise()
            end ,
            {description = "(un)maximize horizontally", group = "client"}),
    })
end)

-- Steam bug with window outside of the screen
client.connect_signal("property::position", function(c)
     if c.class == 'Steam' then
         local g = c.screen.geometry
         if c.y + c.height > g.height then
             c.y = g.height - c.height
             naughty.notify{
                 text = "restricted window: " .. c.name,
             }
         end
         if c.x + c.width > g.width then
             c.x = g.width - c.width
         end
     end
 end)
-- }}}
#+end_src
* Client Rules
#+begin_src lua
-- {{{ Rules
-- Rules to apply to new clients.
ruled.client.connect_signal("request::rules", function()
    -- All clients will match this rule.
    ruled.client.append_rule {
        id         = "floating",
        rule_any = {
            name = { "Ulauncher - Application Launcher" },
        },
        properties = {
            focus     = awful.client.focus.filter,
            raise     = true,
            screen    = awful.screen.preferred,
            border_width = 0,
        }
    }

    ruled.client.append_rule {
        id         = "global",
        rule       = { },
        properties = {
            focus     = awful.client.focus.filter,
            raise     = true,
            screen    = awful.screen.preferred,
            placement = awful.placement.no_overlap+awful.placement.no_offscreen
        }
    }

    -- Floating clients.
    ruled.client.append_rule {
        id       = "floating",
        rule_any = {
            instance = { "copyq", "pinentry" },
            class    = {
                "Arandr", "Blueman-manager", "Gpick", "Kruler", "Sxiv",
                "Tor Browser", "Wpa_gui", "veromix", "xtightvncviewer",
                "Pamac-manager",
                "Polkit-gnome-authentication-agent-1",
                "Polkit-kde-authentication-agent-1",
                "Gcr-prompter",
            },
            -- Note that the name property shown in xprop might be set slightly after creation of the client
            -- and the name shown there might not match defined rules here.
            name    = {
                "Event Tester",  -- xev.
                "Remmina Remote Desktop Client",
                "win0",
            },
            role    = {
                "AlarmWindow",    -- Thunderbird's calendar.
                "ConfigManager",  -- Thunderbird's about:config.
                "pop-up",         -- e.g. Google Chrome's (detached) Developer Tools.
            }
        },
        properties = { floating = true },
        callback = function (c)
            awful.placement.centered(c, nil)
        end
    }

    -- Add titlebars to normal clients and dialogs
    ruled.client.append_rule {
        id         = "dialogs",
        rule_any   = { type = { "dialog" } },
        except_any = {
          -- place here exceptions for special dialogs windows
        },
        properties = { floating = true },
        callback = function (c)
            awful.placement.centered(c, nil)
        end
    }

    -- FullHD Resolution for Specific Apps
    ruled.client.append_rule {
        id         = "dialogs",
        rule_any   = {
            instance = { "remmina",}
        },
        except_any = {
            name = {
                "Remmina Remote Desktop Client"
            }
        },
        properties = { floating = true },
        callback = function (c)
            c.width = 1980
            c.height = 1080
            awful.placement.centered(c, nil)
        end
    }

    -- All Dialogs are floating and center
    ruled.client.append_rule {
        id         = "titlebars",
        rule_any   = { type = { "normal", "dialog" } },
        properties = { titlebars_enabled = true      }
    }

    -- Set Blender to always map on the tag 4 in screen 1.
    ruled.client.append_rule {
        rule_any    = {
            name = {"Blender"}
        },
        properties = {
            tag = screen[1].tags[4],
        },
    }
end)
#+end_src
* Notifications
#+begin_src lua
ruled.notification.connect_signal('request::rules', function()
    -- All notifications will match this rule.
    ruled.notification.append_rule {
        rule       = { },
        properties = {
            screen = awful.screen.preferred,
            --implicit_timeout = 5,
        }
    }
end)

-- Store notifications to the file
naughty.connect_signal("added", function(n)
    -- local file = io.open(os.getenv("HOME") .. "/.config/awesome/naughty_history", "a")
    -- file:write(n.title .. ": " .. n.id .. " " .. n.message .. "\n")
    -- file:close()
end)
#+end_src
* Focusing
#+begin_src lua
client.connect_signal("mouse::enter", function(c)
    c:activate { context = "mouse_enter", raise = false }
end)
#+end_src
* Autostart
#+begin_src lua
autorun = true
autorunProgs = {
   "xcompmgr -f -c -s",
   "xscreensaver --no-splash"
}

if autorun then
   for _,v in ipairs(autorunProgs) do
      awful.util.spawn(v)
   end
end
#+end_src
